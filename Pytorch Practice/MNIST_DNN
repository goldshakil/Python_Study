{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "MNIST_DNN.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "5R5oGkY0aZti",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
 
        "import torch\n",
        "import torchvision\n",
        "from torchvision import transforms, datasets\n",
        "import torch.nn as nn \n",
        "import torch.nn.functional as F\n",
        "import torch.optim as optim\n",
        "\n",
        "\n",
        "\n",
        "#loading the data and preprocessing it\n",
        "mnist_train= torchvision.datasets.MNIST(\"./data\",train=True, download=True, transform=transforms.Compose([transforms.ToTensor()])) # transform the data to a tensor\n",
        "mnist_test= torchvision.datasets.MNIST(\"./data\",train=False, download=True, transform=transforms.Compose([transforms.ToTensor()])) # transform the data to a tensor\n",
        "\n",
        "#how are we gonna iterate over the data?\n",
        "train_loader= torch.utils.data.DataLoader(mnist_train,batch_size=4,shuffle=True) #batch_size : process the data in batches and make a better generalization\n",
        "test_loader= torch.utils.data.DataLoader(mnist_test,batch_size=4,shuffle=False)  #shuffling the data makes a better generalization\n",
        "\n",
        "#every training data has 4 images and 4 labels\n",
        "\n",
        "## NN Definition\n",
        "class Net(nn.Module):\n",
        "\n",
        "  def __init__(self):\n",
        "    super().__init__() #initialize your network\n",
        "    self.fc1=nn.Linear(784, 64) #28*28 -> first flattened image and fully connected layer\n",
        "    self.fc2=nn.Linear(64, 64) # second layer\n",
        "    self.fc3=nn.Linear(64, 64) #third layer\n",
        "    self.fc4=nn.Linear(64, 10) #output layer has 10 neurons\n",
        "    \n",
        "  def forward(self,x):\n",
        "    x=F.relu(self.fc1(x)) # apply the activation function\n",
        "    x=F.relu(self.fc2(x)) # apply the activation function\n",
        "    x=F.relu(self.fc3(x)) # apply the activation function\n",
        "    x=self.fc4(x) # apply the activation function either zero or one ! so one of the node is fired \n",
        "    return F.log_softmax(x,dim=1)\n",
        "    #this function will return for each picture: 10 nodes (prediction value of each label)\n",
        "   "
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1aVWcDYNaab5",
        "colab_type": "code",
        "outputId": "698053e2-b33b-4c23-ec05-07db009a9f69",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 187
        }
      },
      "source": [
        "# Driver code\n",
        "net=Net()\n",
        "optimizer=optim.Adam(net.parameters(),lr=0.001) #get adjustable parameters\n",
        "total_epoch=30 #How many times we pass our full data (the same data)\n",
        "\n",
        "#training\n",
        "correct=0\n",
        "total=0\n",
        "for cur_epoch in range(total_epoch):\n",
        "  for data in train_loader:\n",
        "    #every data consits of 4 (batch_size) umages\n",
        "    X,y=data #picture(X batch_size), label(X batch_size) -> #batch size comes first\n",
        "    net.zero_grad()  \n",
        "    output = net(X.view(-1,784))  \n",
        "    loss = F.nll_loss(output, y)\n",
        "    loss.backward()  \n",
        "    optimizer.step()\n",
        "    #calculate how many write do you have in every training data until the end of all training datas\n",
        "    #output is Batch_size*10 tensor\n",
        "    for k, i in enumerate(output): # the output is batch_size* 10 tensor   # k is the index of the data # i the data itself\n",
        "        if torch.argmax(i) == y[k]: # in every row find the highest prediction index and compare it to y[k]\n",
        "                correct += 1\n",
        "        total += 1\n",
        "  #done with one epoch\n",
        "  acc=correct/total\n",
        "  if((cur_epoch+1)%(total_epoch*0.1)==0):\n",
        "     print('Epoch {}/{}: Accuracy {}'.format(cur_epoch+1, total_epoch, acc))\n",
        "  correct=0\n",
        "  total=0\n",
        "\n"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 3/30: Accuracy 0.9704166666666667\n",
            "Epoch 6/30: Accuracy 0.97865\n",
            "Epoch 9/30: Accuracy 0.9820333333333333\n",
            "Epoch 12/30: Accuracy 0.9854\n",
            "Epoch 15/30: Accuracy 0.9868333333333333\n",
            "Epoch 18/30: Accuracy 0.9882833333333333\n",
            "Epoch 21/30: Accuracy 0.9885666666666667\n",
            "Epoch 24/30: Accuracy 0.9886833333333334\n",
            "Epoch 27/30: Accuracy 0.9897\n",
            "Epoch 30/30: Accuracy 0.9903333333333333\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vBfcOQLQb4Ob",
        "colab_type": "code",
        "outputId": "58d6b4df-833b-4194-dbae-b61a10dab611",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "#validating\n",
        "correct =0\n",
        "total=0\n",
        "with torch.no_grad(): # no gradient\n",
        "  for data in test_loader:\n",
        "      X, y = data # store the images in X and labels in y\n",
        "      output = net(X.view(-1,784)) #send the 4 images\n",
        "      #print(output)\n",
        "      for k, i in enumerate(output): # the output is 4* 10 ARRAY\n",
        "          if torch.argmax(i) == y[k]: # in every row find the highest prediction and comprae its index\n",
        "              correct += 1\n",
        "          total += 1\n",
        "\n",
        "print(\"Test Accuracy: \", correct/total)"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Test Accuracy:  0.9723\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}
